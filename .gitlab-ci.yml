stages:
  - test
  - build
  - init
  - validate
  - plan
  - deploy
  - destroy

default:
  tags:
    - runner-dummy

variables:
  TF_VAR_aws_vpc_id: $AWS_VPC
  TF_VAR_iam_instace_role: $AWS_IAM_ROLE
  TF_VAR_domain_name: $DOMAIN_NAME
  TF_VAR_docker_image: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG

  TF_VERSION: lastest
  TF_PLAN_NAME: tfplan

unit_tests:
  stage: test
  script:
    - echo "Running unit tests..."
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"' # Ejecutar en cada push
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"' # Ejecutar en merge requests

docker_build:
  image: docker:cli
  stage: build
  services:
    - docker:dind
  variables:
    DOCKER_IMAGE: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
    DOCKER_DRIVER: overlay2 # Recommended by Docker
  before_script:
    - apk add --no-cache bash
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
  after_script:
    - docker rmi $(docker images -q) || true # Delete old images
  script:
    - |
      if [ -z "$CI_COMMIT_TAG" ]; then
        DOCKER_TAG="beta-$CI_COMMIT_SHORT_SHA"
      else
        DOCKER_TAG=$CI_COMMIT_TAG
      fi
    - docker build -t $DOCKER_IMAGE:$DOCKER_TAG .
    - docker push $DOCKER_IMAGE:$DOCKER_TAG
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      exists:
        - Dockerfile

terraform_init:
  image:
    name: hashicorp/terraform:${TF_VERSION}
    entrypoint: [""]
  stage: init
  variables:
    TF_WORKSPACE: $CI_COMMIT_REF_NAME
    TF_BACKEND_ADDRESS: https://gitlab.com/api/v4/projects/$CI_PROJECT_ID/terraform/state/$TF_WORKSPACE
  before_script:
    - cd terraform
    - terraform init \
      -backend-config="address=$TF_BACKEND_ADDRESS"" \
      -backend-config="lock_address=$TF_BACKEND_ADDRESS/lock" \
      -backend-config="unlock_address=$TF_BACKEND_ADDRESS/lock" \
      -backend-config="username=$CI_JOB_TOKEN" \
      -backend-config="password=$CI_JOB_TOKEN" \
      -backend-config="lock_method=POST" \
      -backend-config="unlock_method=DELETE"
      -backend-config=retry_wait_min=5
    - terraform workspace new $TF_WORKSPACE || terraform workspace select $TF_WORKSPACE
  artifacts:
    paths:
      - $CI_PROJECT_DIR/terraform/.terraform
  only:
    - main
    - merge_requests

terraform_validate:
  image:
    name: hashicorp/terraform:${TF_VERSION}
    entrypoint: [""]
  stage: validate
  before_script:
    - cd terraform
  script:
    - terraform --version
    - terraform fmt
    - terraform validate
  only:
    - main
    - merge_requests

terraform_plan:
  image:
    name: hashicorp/terraform:${TF_VERSION}
    entrypoint: [""]
  stage: plan
  before_script:
    - cd terraform
  script:
    - terraform plan -out=$TF_PLAN_NAME
  artifacts:
    paths:
      - $CI_PROJECT_DIR/terraform/$TF_PLAN_NAME
  only:
    - main
    - merge_requests

deploy:
  image:
    name: hashicorp/terraform:${TF_VERSION}
    entrypoint: [""]
  stage: deploy
  before_script:
    - cd terraform
  script:
    - terraform apply -auto-approve $TF_PLAN_NAME
  artifacts:
    paths:
      - $CI_PROJECT_DIR/terraform/terraform.tfstate
  when: manual
  only:
    - main

terraform_destroy:
  image:
    name: hashicorp/terraform:${TF_VERSION}
    entrypoint: [""]
  stage: destroy
  before_script:
    - cd terraform
  script:
    - terraform destroy -auto-approve
  when: manual
  needs: [deploy]
  only:
    - main
